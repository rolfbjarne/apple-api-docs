<Type Name="MPSRnnMatrixTrainingLayer" FullName="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer">
  <TypeSignature Language="C#" Value="public class MPSRnnMatrixTrainingLayer : MetalPerformanceShaders.MPSKernel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MPSRnnMatrixTrainingLayer extends MetalPerformanceShaders.MPSKernel" />
  <TypeSignature Language="DocId" Value="T:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" />
  <TypeSignature Language="F#" Value="type MPSRnnMatrixTrainingLayer = class&#xA;    inherit MPSKernel" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MetalPerformanceShaders.MPSKernel</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MPSRNNMatrixTrainingLayer", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSRnnMatrixTrainingLayer (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer : Foundation.NSCoder -&gt; MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" Usage="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MPSRnnMatrixTrainingLayer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer : Foundation.NSObjectFlag -&gt; MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" Usage="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MPSRnnMatrixTrainingLayer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer : nativeint -&gt; MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" Usage="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSRnnMatrixTrainingLayer (Foundation.NSCoder decoder, Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder decoder, class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.#ctor(Foundation.NSCoder,Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer : Foundation.NSCoder * Metal.IMTLDevice -&gt; MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" Usage="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer (decoder, device)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:device:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="decoder" Type="Foundation.NSCoder" />
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="decoder">To be added.</param>
        <param name="device">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSRnnMatrixTrainingLayer (Metal.IMTLDevice device, MetalPerformanceShaders.MPSRnnDescriptor rnnDescriptor, Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; trainableWeights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Metal.IMTLDevice device, class MetalPerformanceShaders.MPSRnnDescriptor rnnDescriptor, class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSMatrix&gt; trainableWeights) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.#ctor(Metal.IMTLDevice,MetalPerformanceShaders.MPSRnnDescriptor,Foundation.NSMutableArray{MetalPerformanceShaders.MPSMatrix})" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer : Metal.IMTLDevice * MetalPerformanceShaders.MPSRnnDescriptor * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; -&gt; MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" Usage="new MetalPerformanceShaders.MPSRnnMatrixTrainingLayer (device, rnnDescriptor, trainableWeights)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithDevice:rnnDescriptor:trainableWeights:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="device" Type="Metal.IMTLDevice" />
        <Parameter Name="rnnDescriptor" Type="MetalPerformanceShaders.MPSRnnDescriptor" />
        <Parameter Name="trainableWeights" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt;" />
      </Parameters>
      <Docs>
        <param name="device">To be added.</param>
        <param name="rnnDescriptor">To be added.</param>
        <param name="trainableWeights">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulateWeightGradients">
      <MemberSignature Language="C#" Value="public virtual bool AccumulateWeightGradients { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccumulateWeightGradients" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.AccumulateWeightGradients" />
      <MemberSignature Language="F#" Value="member this.AccumulateWeightGradients : bool with get, set" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.AccumulateWeightGradients" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accumulateWeightGradients")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccumulateWeightGradients:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MetalPerformanceShaders.MPSRnnMatrixTrainingLayer Copy (Foundation.NSZone zone, Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MetalPerformanceShaders.MPSRnnMatrixTrainingLayer Copy(class Foundation.NSZone zone, class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.Copy(Foundation.NSZone,Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone * Metal.IMTLDevice -&gt; MetalPerformanceShaders.MPSRnnMatrixTrainingLayer" Usage="mPSRnnMatrixTrainingLayer.Copy (zone, device)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:device:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalPerformanceShaders.MPSRnnMatrixTrainingLayer</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="zone">To be added.</param>
        <param name="device">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTemporaryWeightGradientMatrices">
      <MemberSignature Language="C#" Value="public virtual void CreateTemporaryWeightGradientMatrices (Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; matrices, MetalPerformanceShaders.MPSDataType dataType, Metal.IMTLCommandBuffer commandBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateTemporaryWeightGradientMatrices(class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSMatrix&gt; matrices, valuetype MetalPerformanceShaders.MPSDataType dataType, class Metal.IMTLCommandBuffer commandBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.CreateTemporaryWeightGradientMatrices(Foundation.NSMutableArray{MetalPerformanceShaders.MPSMatrix},MetalPerformanceShaders.MPSDataType,Metal.IMTLCommandBuffer)" />
      <MemberSignature Language="F#" Value="abstract member CreateTemporaryWeightGradientMatrices : Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; * MetalPerformanceShaders.MPSDataType * Metal.IMTLCommandBuffer -&gt; unit&#xA;override this.CreateTemporaryWeightGradientMatrices : Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; * MetalPerformanceShaders.MPSDataType * Metal.IMTLCommandBuffer -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.CreateTemporaryWeightGradientMatrices (matrices, dataType, commandBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createTemporaryWeightGradientMatrices:dataType:commandBuffer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrices" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt;" />
        <Parameter Name="dataType" Type="MetalPerformanceShaders.MPSDataType" />
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
      </Parameters>
      <Docs>
        <param name="matrices">To be added.</param>
        <param name="dataType">To be added.</param>
        <param name="commandBuffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWeightGradientMatrices">
      <MemberSignature Language="C#" Value="public virtual void CreateWeightGradientMatrices (Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; matrices, MetalPerformanceShaders.MPSDataType dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateWeightGradientMatrices(class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSMatrix&gt; matrices, valuetype MetalPerformanceShaders.MPSDataType dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.CreateWeightGradientMatrices(Foundation.NSMutableArray{MetalPerformanceShaders.MPSMatrix},MetalPerformanceShaders.MPSDataType)" />
      <MemberSignature Language="F#" Value="abstract member CreateWeightGradientMatrices : Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; * MetalPerformanceShaders.MPSDataType -&gt; unit&#xA;override this.CreateWeightGradientMatrices : Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; * MetalPerformanceShaders.MPSDataType -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.CreateWeightGradientMatrices (matrices, dataType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createWeightGradientMatrices:dataType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrices" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt;" />
        <Parameter Name="dataType" Type="MetalPerformanceShaders.MPSDataType" />
      </Parameters>
      <Docs>
        <param name="matrices">To be added.</param>
        <param name="dataType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWeightMatrices">
      <MemberSignature Language="C#" Value="public virtual void CreateWeightMatrices (Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; matrices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateWeightMatrices(class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSMatrix&gt; matrices) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.CreateWeightMatrices(Foundation.NSMutableArray{MetalPerformanceShaders.MPSMatrix})" />
      <MemberSignature Language="F#" Value="abstract member CreateWeightMatrices : Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; -&gt; unit&#xA;override this.CreateWeightMatrices : Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt; -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.CreateWeightMatrices matrices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createWeightMatrices:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrices" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSMatrix&gt;" />
      </Parameters>
      <Docs>
        <param name="matrices">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeCopyWeights">
      <MemberSignature Language="C#" Value="public virtual void EncodeCopyWeights (Metal.IMTLCommandBuffer commandBuffer, MetalPerformanceShaders.MPSMatrix[] weights, MetalPerformanceShaders.MPSRnnMatrixId matrixId, MetalPerformanceShaders.MPSMatrix matrix, bool copyFromWeightsToMatrix, Metal.MTLOrigin matrixOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeCopyWeights(class Metal.IMTLCommandBuffer commandBuffer, class MetalPerformanceShaders.MPSMatrix[] weights, valuetype MetalPerformanceShaders.MPSRnnMatrixId matrixId, class MetalPerformanceShaders.MPSMatrix matrix, bool copyFromWeightsToMatrix, valuetype Metal.MTLOrigin matrixOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.EncodeCopyWeights(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnMatrixId,MetalPerformanceShaders.MPSMatrix,System.Boolean,Metal.MTLOrigin)" />
      <MemberSignature Language="F#" Value="abstract member EncodeCopyWeights : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSRnnMatrixId * MetalPerformanceShaders.MPSMatrix * bool * Metal.MTLOrigin -&gt; unit&#xA;override this.EncodeCopyWeights : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSRnnMatrixId * MetalPerformanceShaders.MPSMatrix * bool * Metal.MTLOrigin -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.EncodeCopyWeights (commandBuffer, weights, matrixId, matrix, copyFromWeightsToMatrix, matrixOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeCopyWeightsToCommandBuffer:weights:matrixId:matrix:copyFromWeightsToMatrix:matrixOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="weights" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="matrixId" Type="MetalPerformanceShaders.MPSRnnMatrixId" />
        <Parameter Name="matrix" Type="MetalPerformanceShaders.MPSMatrix" />
        <Parameter Name="copyFromWeightsToMatrix" Type="System.Boolean" />
        <Parameter Name="matrixOffset" Type="Metal.MTLOrigin" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="weights">To be added.</param>
        <param name="matrixId">To be added.</param>
        <param name="matrix">To be added.</param>
        <param name="copyFromWeightsToMatrix">To be added.</param>
        <param name="matrixOffset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeForwardSequence">
      <MemberSignature Language="C#" Value="public virtual void EncodeForwardSequence (Metal.IMTLCommandBuffer commandBuffer, MetalPerformanceShaders.MPSMatrix[] sourceMatrices, MetalPerformanceShaders.MPSMatrix[] destinationMatrices, Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; trainingStates, MetalPerformanceShaders.MPSMatrix[] weights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeForwardSequence(class Metal.IMTLCommandBuffer commandBuffer, class MetalPerformanceShaders.MPSMatrix[] sourceMatrices, class MetalPerformanceShaders.MPSMatrix[] destinationMatrices, class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; trainingStates, class MetalPerformanceShaders.MPSMatrix[] weights) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.EncodeForwardSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],Foundation.NSMutableArray{MetalPerformanceShaders.MPSRnnMatrixTrainingState},MetalPerformanceShaders.MPSMatrix[])" />
      <MemberSignature Language="F#" Value="abstract member EncodeForwardSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; * MetalPerformanceShaders.MPSMatrix[] -&gt; unit&#xA;override this.EncodeForwardSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; * MetalPerformanceShaders.MPSMatrix[] -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.EncodeForwardSequence (commandBuffer, sourceMatrices, destinationMatrices, trainingStates, weights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeForwardSequenceToCommandBuffer:sourceMatrices:destinationMatrices:trainingStates:weights:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="sourceMatrices" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="destinationMatrices" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="trainingStates" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt;" />
        <Parameter Name="weights" Type="MetalPerformanceShaders.MPSMatrix[]" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="sourceMatrices">To be added.</param>
        <param name="destinationMatrices">To be added.</param>
        <param name="trainingStates">To be added.</param>
        <param name="weights">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeForwardSequence">
      <MemberSignature Language="C#" Value="public virtual void EncodeForwardSequence (Metal.IMTLCommandBuffer commandBuffer, MetalPerformanceShaders.MPSMatrix[] sourceMatrices, IntPtr sourceOffsets, MetalPerformanceShaders.MPSMatrix[] destinationMatrices, IntPtr destinationOffsets, Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; trainingStates, MetalPerformanceShaders.MPSRnnRecurrentMatrixState recurrentInputState, Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; recurrentOutputStates, MetalPerformanceShaders.MPSMatrix[] weights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeForwardSequence(class Metal.IMTLCommandBuffer commandBuffer, class MetalPerformanceShaders.MPSMatrix[] sourceMatrices, native int sourceOffsets, class MetalPerformanceShaders.MPSMatrix[] destinationMatrices, native int destinationOffsets, class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; trainingStates, class MetalPerformanceShaders.MPSRnnRecurrentMatrixState recurrentInputState, class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; recurrentOutputStates, class MetalPerformanceShaders.MPSMatrix[] weights) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.EncodeForwardSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,Foundation.NSMutableArray{MetalPerformanceShaders.MPSRnnMatrixTrainingState},MetalPerformanceShaders.MPSRnnRecurrentMatrixState,Foundation.NSMutableArray{MetalPerformanceShaders.MPSRnnRecurrentMatrixState},MetalPerformanceShaders.MPSMatrix[])" />
      <MemberSignature Language="F#" Value="abstract member EncodeForwardSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * nativeint * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; * MetalPerformanceShaders.MPSRnnRecurrentMatrixState * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; * MetalPerformanceShaders.MPSMatrix[] -&gt; unit&#xA;override this.EncodeForwardSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * nativeint * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt; * MetalPerformanceShaders.MPSRnnRecurrentMatrixState * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; * MetalPerformanceShaders.MPSMatrix[] -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.EncodeForwardSequence (commandBuffer, sourceMatrices, sourceOffsets, destinationMatrices, destinationOffsets, trainingStates, recurrentInputState, recurrentOutputStates, weights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeForwardSequenceToCommandBuffer:sourceMatrices:sourceOffsets:destinationMatrices:destinationOffsets:trainingStates:recurrentInputState:recurrentOutputStates:weights:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="sourceMatrices" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="sourceOffsets" Type="System.IntPtr" />
        <Parameter Name="destinationMatrices" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="destinationOffsets" Type="System.IntPtr" />
        <Parameter Name="trainingStates" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnMatrixTrainingState&gt;" />
        <Parameter Name="recurrentInputState" Type="MetalPerformanceShaders.MPSRnnRecurrentMatrixState" />
        <Parameter Name="recurrentOutputStates" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt;" />
        <Parameter Name="weights" Type="MetalPerformanceShaders.MPSMatrix[]" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="sourceMatrices">To be added.</param>
        <param name="sourceOffsets">To be added.</param>
        <param name="destinationMatrices">To be added.</param>
        <param name="destinationOffsets">To be added.</param>
        <param name="trainingStates">To be added.</param>
        <param name="recurrentInputState">To be added.</param>
        <param name="recurrentOutputStates">To be added.</param>
        <param name="weights">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeGradientSequence">
      <MemberSignature Language="C#" Value="public virtual void EncodeGradientSequence (Metal.IMTLCommandBuffer commandBuffer, MetalPerformanceShaders.MPSMatrix[] forwardSources, MetalPerformanceShaders.MPSMatrix[] sourceGradients, MetalPerformanceShaders.MPSMatrix[] destinationGradients, MetalPerformanceShaders.MPSMatrix[] weightGradients, MetalPerformanceShaders.MPSRnnMatrixTrainingState[] trainingStates, MetalPerformanceShaders.MPSMatrix[] weights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeGradientSequence(class Metal.IMTLCommandBuffer commandBuffer, class MetalPerformanceShaders.MPSMatrix[] forwardSources, class MetalPerformanceShaders.MPSMatrix[] sourceGradients, class MetalPerformanceShaders.MPSMatrix[] destinationGradients, class MetalPerformanceShaders.MPSMatrix[] weightGradients, class MetalPerformanceShaders.MPSRnnMatrixTrainingState[] trainingStates, class MetalPerformanceShaders.MPSMatrix[] weights) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.EncodeGradientSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnMatrixTrainingState[],MetalPerformanceShaders.MPSMatrix[])" />
      <MemberSignature Language="F#" Value="abstract member EncodeGradientSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSRnnMatrixTrainingState[] * MetalPerformanceShaders.MPSMatrix[] -&gt; unit&#xA;override this.EncodeGradientSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSRnnMatrixTrainingState[] * MetalPerformanceShaders.MPSMatrix[] -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.EncodeGradientSequence (commandBuffer, forwardSources, sourceGradients, destinationGradients, weightGradients, trainingStates, weights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeGradientSequenceToCommandBuffer:forwardSources:sourceGradients:destinationGradients:weightGradients:trainingStates:weights:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="forwardSources" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="sourceGradients" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="destinationGradients" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="weightGradients" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="trainingStates" Type="MetalPerformanceShaders.MPSRnnMatrixTrainingState[]" />
        <Parameter Name="weights" Type="MetalPerformanceShaders.MPSMatrix[]" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="forwardSources">To be added.</param>
        <param name="sourceGradients">To be added.</param>
        <param name="destinationGradients">To be added.</param>
        <param name="weightGradients">To be added.</param>
        <param name="trainingStates">To be added.</param>
        <param name="weights">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeGradientSequence">
      <MemberSignature Language="C#" Value="public virtual void EncodeGradientSequence (Metal.IMTLCommandBuffer commandBuffer, MetalPerformanceShaders.MPSMatrix[] forwardSources, IntPtr forwardSourceOffsets, MetalPerformanceShaders.MPSMatrix[] sourceGradients, IntPtr sourceGradientOffsets, MetalPerformanceShaders.MPSMatrix[] destinationGradients, IntPtr destinationOffsets, MetalPerformanceShaders.MPSMatrix[] weightGradients, MetalPerformanceShaders.MPSRnnMatrixTrainingState[] trainingStates, MetalPerformanceShaders.MPSRnnRecurrentMatrixState recurrentInputState, Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; recurrentOutputStates, MetalPerformanceShaders.MPSMatrix[] weights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeGradientSequence(class Metal.IMTLCommandBuffer commandBuffer, class MetalPerformanceShaders.MPSMatrix[] forwardSources, native int forwardSourceOffsets, class MetalPerformanceShaders.MPSMatrix[] sourceGradients, native int sourceGradientOffsets, class MetalPerformanceShaders.MPSMatrix[] destinationGradients, native int destinationOffsets, class MetalPerformanceShaders.MPSMatrix[] weightGradients, class MetalPerformanceShaders.MPSRnnMatrixTrainingState[] trainingStates, class MetalPerformanceShaders.MPSRnnRecurrentMatrixState recurrentInputState, class Foundation.NSMutableArray`1&lt;class MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; recurrentOutputStates, class MetalPerformanceShaders.MPSMatrix[] weights) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.EncodeGradientSequence(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],System.IntPtr,MetalPerformanceShaders.MPSMatrix[],MetalPerformanceShaders.MPSRnnMatrixTrainingState[],MetalPerformanceShaders.MPSRnnRecurrentMatrixState,Foundation.NSMutableArray{MetalPerformanceShaders.MPSRnnRecurrentMatrixState},MetalPerformanceShaders.MPSMatrix[])" />
      <MemberSignature Language="F#" Value="abstract member EncodeGradientSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSRnnMatrixTrainingState[] * MetalPerformanceShaders.MPSRnnRecurrentMatrixState * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; * MetalPerformanceShaders.MPSMatrix[] -&gt; unit&#xA;override this.EncodeGradientSequence : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * nativeint * MetalPerformanceShaders.MPSMatrix[] * MetalPerformanceShaders.MPSRnnMatrixTrainingState[] * MetalPerformanceShaders.MPSRnnRecurrentMatrixState * Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt; * MetalPerformanceShaders.MPSMatrix[] -&gt; unit" Usage="mPSRnnMatrixTrainingLayer.EncodeGradientSequence (commandBuffer, forwardSources, forwardSourceOffsets, sourceGradients, sourceGradientOffsets, destinationGradients, destinationOffsets, weightGradients, trainingStates, recurrentInputState, recurrentOutputStates, weights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeGradientSequenceToCommandBuffer:forwardSources:forwardSourceOffsets:sourceGradients:sourceGradientOffsets:destinationGradients:destinationOffsets:weightGradients:trainingStates:recurrentInputState:recurrentOutputStates:weights:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="forwardSources" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="forwardSourceOffsets" Type="System.IntPtr" />
        <Parameter Name="sourceGradients" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="sourceGradientOffsets" Type="System.IntPtr" />
        <Parameter Name="destinationGradients" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="destinationOffsets" Type="System.IntPtr" />
        <Parameter Name="weightGradients" Type="MetalPerformanceShaders.MPSMatrix[]" />
        <Parameter Name="trainingStates" Type="MetalPerformanceShaders.MPSRnnMatrixTrainingState[]" />
        <Parameter Name="recurrentInputState" Type="MetalPerformanceShaders.MPSRnnRecurrentMatrixState" />
        <Parameter Name="recurrentOutputStates" Type="Foundation.NSMutableArray&lt;MetalPerformanceShaders.MPSRnnRecurrentMatrixState&gt;" />
        <Parameter Name="weights" Type="MetalPerformanceShaders.MPSMatrix[]" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="forwardSources">To be added.</param>
        <param name="forwardSourceOffsets">To be added.</param>
        <param name="sourceGradients">To be added.</param>
        <param name="sourceGradientOffsets">To be added.</param>
        <param name="destinationGradients">To be added.</param>
        <param name="destinationOffsets">To be added.</param>
        <param name="weightGradients">To be added.</param>
        <param name="trainingStates">To be added.</param>
        <param name="recurrentInputState">To be added.</param>
        <param name="recurrentOutputStates">To be added.</param>
        <param name="weights">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputFeatureChannels">
      <MemberSignature Language="C#" Value="public virtual nuint InputFeatureChannels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint InputFeatureChannels" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.InputFeatureChannels" />
      <MemberSignature Language="F#" Value="member this.InputFeatureChannels : nuint" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.InputFeatureChannels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputFeatureChannels")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputFeatureChannels">
      <MemberSignature Language="C#" Value="public virtual nuint OutputFeatureChannels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint OutputFeatureChannels" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.OutputFeatureChannels" />
      <MemberSignature Language="F#" Value="member this.OutputFeatureChannels : nuint" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.OutputFeatureChannels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("outputFeatureChannels")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecurrentOutputIsTemporary">
      <MemberSignature Language="C#" Value="public virtual bool RecurrentOutputIsTemporary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecurrentOutputIsTemporary" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.RecurrentOutputIsTemporary" />
      <MemberSignature Language="F#" Value="member this.RecurrentOutputIsTemporary : bool with get, set" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.RecurrentOutputIsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("recurrentOutputIsTemporary")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRecurrentOutputIsTemporary:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreAllIntermediateStates">
      <MemberSignature Language="C#" Value="public virtual bool StoreAllIntermediateStates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreAllIntermediateStates" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.StoreAllIntermediateStates" />
      <MemberSignature Language="F#" Value="member this.StoreAllIntermediateStates : bool with get, set" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.StoreAllIntermediateStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("storeAllIntermediateStates")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setStoreAllIntermediateStates:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainingStateIsTemporary">
      <MemberSignature Language="C#" Value="public virtual bool TrainingStateIsTemporary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrainingStateIsTemporary" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.TrainingStateIsTemporary" />
      <MemberSignature Language="F#" Value="member this.TrainingStateIsTemporary : bool with get, set" Usage="MetalPerformanceShaders.MPSRnnMatrixTrainingLayer.TrainingStateIsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trainingStateIsTemporary")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTrainingStateIsTemporary:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
