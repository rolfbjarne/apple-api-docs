<Type Name="MarshalManagedExceptionMode" FullName="ObjCRuntime.MarshalManagedExceptionMode">
  <TypeSignature Language="C#" Value="public enum MarshalManagedExceptionMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MarshalManagedExceptionMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:ObjCRuntime.MarshalManagedExceptionMode" />
  <TypeSignature Language="F#" Value="type MarshalManagedExceptionMode = " />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Xamarin.Mac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>This enum is used to specify what to do when an managed exception is thrown, and that exception reaches native code.</summary>
    <remarks>
    </remarks>
    <related type="article" href="https://developer.xamarin.com/guides/ios/advanced_topics/exception_marshaling/">Exception marshaling</related>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="Abort" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype ObjCRuntime.MarshalManagedExceptionMode Abort = int32(3)" />
      <MemberSignature Language="DocId" Value="F:ObjCRuntime.MarshalManagedExceptionMode.Abort" />
      <MemberSignature Language="F#" Value="Abort = 3" Usage="ObjCRuntime.MarshalManagedExceptionMode.Abort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.MarshalManagedExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Abort when a managed exception reaches native code.</summary>
        <remarks>
          <para>This may be useful during debugging to easily detect when managed exceptions reaches native code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype ObjCRuntime.MarshalManagedExceptionMode Default = int32(0)" />
      <MemberSignature Language="DocId" Value="F:ObjCRuntime.MarshalManagedExceptionMode.Default" />
      <MemberSignature Language="F#" Value="Default = 0" Usage="ObjCRuntime.MarshalManagedExceptionMode.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.MarshalManagedExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>The default mode; this depends on the platform.</summary>
        <remarks>
          <para>Due to backwards compatibility concerns, this is currently <see cref="F:ObjCRuntime.MarshalManagedExceptionMode.UnwindNativeCode" /> on macOS, iOS and tvOS, which is not recommended.</para>
          <para>Instead of relying on the default mode, the recommended option is to select <see cref="F:ObjCRuntime.MarshalManagedExceptionMode.ThrowObjectiveCException" /> instead (which is already the default mode on watchOS).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disable">
      <MemberSignature Language="C#" Value="Disable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype ObjCRuntime.MarshalManagedExceptionMode Disable = int32(4)" />
      <MemberSignature Language="DocId" Value="F:ObjCRuntime.MarshalManagedExceptionMode.Disable" />
      <MemberSignature Language="F#" Value="Disable = 4" Usage="ObjCRuntime.MarshalManagedExceptionMode.Disable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.MarshalManagedExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Disable marshalling managed exceptions.</summary>
        <remarks>
          <para>This is effectively the same as <see cref="F:ObjCRuntime.MarshalManagedExceptionMode.UnwindNativeCode" />, except that no events will be raised.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowObjectiveCException">
      <MemberSignature Language="C#" Value="ThrowObjectiveCException" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype ObjCRuntime.MarshalManagedExceptionMode ThrowObjectiveCException = int32(2)" />
      <MemberSignature Language="DocId" Value="F:ObjCRuntime.MarshalManagedExceptionMode.ThrowObjectiveCException" />
      <MemberSignature Language="F#" Value="ThrowObjectiveCException = 2" Usage="ObjCRuntime.MarshalManagedExceptionMode.ThrowObjectiveCException" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.MarshalManagedExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Convert the managed exception to an Objective-C exception.</summary>
        <remarks>
          <para>This is the recommended option.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwindNativeCode">
      <MemberSignature Language="C#" Value="UnwindNativeCode" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype ObjCRuntime.MarshalManagedExceptionMode UnwindNativeCode = int32(1)" />
      <MemberSignature Language="DocId" Value="F:ObjCRuntime.MarshalManagedExceptionMode.UnwindNativeCode" />
      <MemberSignature Language="F#" Value="UnwindNativeCode = 1" Usage="ObjCRuntime.MarshalManagedExceptionMode.UnwindNativeCode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.MarshalManagedExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Let the mono runtime unwind native frames.</summary>
        <remarks>
          <para>This option is not recommended, because it leads to undefined behavior (the app may crash, leak memory, deadlock, etc.) if managed exceptions reaches native code (the mono runtime does not know how to unwind native frames, so anything can happen). The recommended option is <see cref="F:ObjCRuntime.MarshalManagedExceptionMode.ThrowObjectiveCException" />.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
